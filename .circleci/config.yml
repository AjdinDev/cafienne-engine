version: 2.1
jobs:
  main-build:
    working_directory: ~/cafienne-engine
    machine:
      image: ubuntu-2004:202107-02
    resource_class: large
    steps:
      - checkout
      - run:
          name: Clone CMMN-test framework (and optionally checkout corresponding test branch)
          command: |
            cd ..
            git clone https://$GIT_USER:$GIT_TOKEN@github.com/cafienne/cmmn-test-framework.git
            cd ./cmmn-test-framework
            echo "Trying to checkout corresponding test branch" 
            echo
            git checkout $CIRCLE_BRANCH || git checkout main
      - run:
          name: Compile code
          command: sbt compile
      - run:
          name: Unit tests
          command: sbt test
      - run:
          name: Compile CMMN Test Framwork
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm install
      - run:
          name: Docker login
          command: echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Pull DB, Mailcatcher and IDP docker images
          command: |
            docker-compose -f .circleci/docker-config/base-infra.yml pull
            docker-compose -f .circleci/docker-config/databases.yml pull
            docker-compose -f .circleci/docker-config/databases-compatibility.yml pull

      # Start the basic container infrastructure
      - run:
          name: Start IDP and mailcatcher
          command: |
            docker-compose -f .circleci/docker-config/base-infra.yml up -d
      - run:
          name: Start DB containers
          command: |
            docker-compose -f .circleci/docker-config/databases.yml up -d
            sleep 10

      # Build the image to test
      - run:
          name: Build and publish local docker image 'cafienne/engine:latest'
          command: sbt docker:publishLocal

      # Starting docker environment for anonymous start case testing
      - run:
          name: Start Cafienne Engine for anonymous start case testing
          command: |
            docker-compose -f .circleci/docker-config/engine-with-anonymous-configuration.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of engine before running test
          command: |
            sudo chmod -R 777 ./
            docker logs cafienne
      - run:
          name: Test StartCase anonymously
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod PingTokenService PingTestEnvironment TestSwagger TestAnonymousStartCase
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for In-memory testing
      - run:
          name: Start Cafienne Engine for in-memory testing
          command: |
            docker-compose -f .circleci/docker-config/engine-with-inmemory-db.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of engine before running test
          command: |
            sudo chmod -R 777 ./
            docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for MS SQL Server testing
      - run:
          name: Start Cafienne Engine for MS SQL Server testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-sqlserver-empty.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            docker logs empty-sql-server
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod
      # Stop engine, but also the sql server "without events" instance, and start the one "with events" for later usage
      - run:
          name: Stop and remove the Cafienne container, and also MS SQL Server container
          command: |
            docker logs cafienne
            docker rm -f cafienne empty-sql-server
            sleep 3
            docker-compose -f .circleci/docker-config/databases-compatibility.yml up -d sql-server-with-events

      # Starting docker environment for PostgreSQL testing
      - run:
          name: Start Cafienne Engine for PostgreSQL testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-postgres-empty.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            echo 
            echo Logs for empty PostgreSQL event database
            echo
            docker logs postgres-empty-event-db
            echo 
            echo Logs for PostgreSQL query database
            echo
            docker logs postgres-empty-query-db
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for Cassandra testing
      - run:
          name: Start Cafienne Engine for Cassandra testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-cassandra.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            echo 
            echo Logs for Cassandra event database
            echo
            docker logs cassandra
            echo 
            echo Logs for PostgreSQL query database
            echo
            docker logs postgres-for-cassandra
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for backwards compatibility MS SQL Server testing against latest engine
      - run:
          name: Start Cafienne Engine for SQL Server compatibility testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-sqlserver-events.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: docker logs sql-server-with-events
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for backwards compatibility PostgreSQL testing against latest engine
      - run:
          name: Start Cafienne Engine for PostgreSQL compatibility testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-postgres-events.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            echo 
            echo Logs for PostgreSQL database with existing events
            echo
            docker logs postgres-with-events
            echo 
            echo Logs for PostgreSQL query database
            echo
            docker logs postgres-query-db-for-events
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod

      # Always show docker logs. This will give the cafienne engine console info when any of above tests fails.
      - run:
          name: Docker logs of engine after the test
          command: docker logs cafienne
          when: always

      # All good, push the image to docker hub if we're on the master branch
      - run:
          name: Push Cafienne 'latest' image to docker hub (only on master branch)
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
              echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
              docker push cafienne/engine:latest
            else
              echo "Not pushing image to docker hub"
            fi

  branch-build:
    working_directory: ~/cafienne-engine
    machine:
      image: ubuntu-2004:202107-02
    resource_class: large
    steps:
      - checkout
      - run:
          name: Clone CMMN-test framework (and optionally checkout corresponding test branch)
          command: |
            cd ..
            git clone https://$GIT_USER:$GIT_TOKEN@github.com/cafienne/cmmn-test-framework.git
            cd ./cmmn-test-framework
            echo "Trying to checkout corresponding test branch" 
            echo
            git checkout $CIRCLE_BRANCH || git checkout main
      - run:
          name: Compile code
          command: sbt compile
      - run:
          name: Unit tests
          command: sbt test
      - run:
          name: Compile CMMN Test Framwork
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm install
      - run:
          name: Docker login
          command: echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Pull Mailcatcher and IDP docker images
          command: |
            docker-compose -f .circleci/docker-config/base-infra.yml pull

      # Only launch the mailcatcher and idp token service, not the databases in the infra
      - run:
          name: Start IDP and mailcatcher
          command: |
            docker-compose -f .circleci/docker-config/base-infra.yml up -d

      # Build the image to test
      - run:
          name: Build and publish local docker image 'cafienne/engine:latest'
          command: sbt docker:publishLocal

      # Starting docker environment for anonymous start case testing
      - run:
          name: Start Cafienne Engine for anonymous start case testing
          command: |
            docker-compose -f .circleci/docker-config/engine-with-anonymous-configuration.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of engine before running test
          command: |
            sudo chmod -R 777 ./
            docker logs cafienne
      - run:
          name: Test StartCase anonymously
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod PingTokenService PingTestEnvironment TestSwagger TestAnonymousStartCase
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for In-memory testing
      - run:
          name: Start Cafienne Engine for in-memory testing
          command: |
            docker-compose -f .circleci/docker-config/engine-with-inmemory-db.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of engine before running test
          command: |
            sudo chmod -R 777 ./
            docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod

      # Always show docker logs. This will give the cafienne engine console info when any of above tests fails.
      - run:
          name: Docker logs of engine after the test
          command: docker logs cafienne
          when: always

  release-build:
    working_directory: ~/cafienne-engine
    machine:
      image: ubuntu-2004:202107-02
    resource_class: large
    steps:
      - checkout
      - run:
          name: Clone CMMN-test framework (and optionally checkout corresponding test branch)
          command: |
            cd ..
            git clone https://$GIT_USER:$GIT_TOKEN@github.com/cafienne/cmmn-test-framework.git
            cd ./cmmn-test-framework
            echo "Trying to checkout corresponding test branch" 
            echo
            git checkout $CIRCLE_BRANCH || git checkout main
      - run:
          name: Check for version TAG
          command: |
            echo `git describe --tags --exact-match` > ./version.txt
            cat ./version.txt
            TAG=$(cat ./version.txt)
      - run:
          name: Compile code
          command: sbt compile
      - run:
          name: Unit tests
          command: sbt test
      - run:
          name: Compile CMMN Test Framwork
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm install
      - run:
          name: Docker login
          command: echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Pull DB, Mailcatcher and IDP docker images
          command: |
            docker-compose -f .circleci/docker-config/base-infra.yml pull
            docker-compose -f .circleci/docker-config/databases.yml pull
            docker-compose -f .circleci/docker-config/databases-compatibility.yml pull

      # Start the basic container infrastructure
      - run:
          name: Start IDP and mailcatcher
          command: |
            docker-compose -f .circleci/docker-config/base-infra.yml up -d
      - run:
          name: Start DB containers
          command: |
            docker-compose -f .circleci/docker-config/databases.yml up -d
            sleep 10

      # Build the image to test
      - run:
          name: Build and publish local docker image 'cafienne/engine:latest'
          command: sbt docker:publishLocal

      # Starting docker environment for anonymous start case testing
      - run:
          name: Start Cafienne Engine for anonymous start case testing
          command: |
            docker-compose -f .circleci/docker-config/engine-with-anonymous-configuration.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of engine before running test
          command: |
            sudo chmod -R 777 ./
            docker logs cafienne
      - run:
          name: Test StartCase anonymously
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod PingTokenService PingTestEnvironment TestSwagger TestAnonymousStartCase
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for In-memory testing
      - run:
          name: Start Cafienne Engine for in-memory testing
          command: |
            docker-compose -f .circleci/docker-config/engine-with-inmemory-db.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of engine before running test
          command: |
            sudo chmod -R 777 ./
            docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for MS SQL Server testing
      - run:
          name: Start Cafienne Engine for MS SQL Server testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-sqlserver-empty.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: docker logs empty-sql-server
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod
      # Stop engine, but also the sql server "without events" instance, and start the one "with events" for later usage
      - run:
          name: Stop and remove the Cafienne container, and also MS SQL Server container
          command: |
            docker logs cafienne
            docker rm -f cafienne empty-sql-server
            sleep 3
            docker-compose -f .circleci/docker-config/databases-compatibility.yml up -d sql-server-with-events

      # Starting docker environment for PostgreSQL testing
      - run:
          name: Start Cafienne Engine for PostgreSQL testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-postgres-empty.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            echo 
            echo Logs for empty PostgreSQL event database
            echo
            docker logs postgres-empty-event-db
            echo 
            echo Logs for PostgreSQL query database
            echo
            docker logs postgres-empty-query-db
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for Cassandra testing
      - run:
          name: Start Cafienne Engine for Cassandra testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-cassandra.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            echo 
            echo Logs for Cassandra event database
            echo
            docker logs cassandra
            echo 
            echo Logs for PostgreSQL query database
            echo
            docker logs postgres-for-cassandra
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for backwards compatibility MS SQL Server testing against latest engine
      - run:
          name: Start Cafienne Engine for SQL Server compatibility testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-sqlserver-events.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: docker logs sql-server-with-events
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod
      - run:
          name: Stop and remove the Cafienne container
          command: |
            docker logs cafienne
            docker rm -f cafienne

      # Starting docker environment for backwards compatibility PostgreSQL testing against latest engine
      - run:
          name: Start Cafienne Engine for PostgreSQL compatibility testing
          command: |
            sudo docker-compose -f .circleci/docker-config/engine-with-postgres-events.yml up -d cafienne
            sleep 10
      - run:
          name: Docker logs of database
          command: |
            echo 
            echo Logs for PostgreSQL database with existing events
            echo
            docker logs postgres-with-events
            echo 
            echo Logs for PostgreSQL query database
            echo
            docker logs postgres-query-db-for-events
      - run:
          name: Docker logs of engine before starting test
          command: docker logs cafienne
      - run:
          name: Test engine against framework
          command: |
            cd ..
            cd ./cmmn-test-framework
            npm run prod

      # Always show docker logs. This will give the cafienne engine console info when any of above tests fails.
      - run:
          name: Docker logs of engine after the test
          command: docker logs cafienne
          when: always

      - run:
          name: Push Cafienne 'latest' and '$CIRCLE_TAG' image to docker hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker tag cafienne/engine:latest cafienne/engine:$CIRCLE_TAG
            docker push cafienne/engine:$CIRCLE_TAG

workflows:
  version: 2
  ci:
    jobs:
      - main-build:
          context: automation-context
          filters:
            branches:
              only:
                - main
                - dependency-updates
      - branch-build:
          context: automation-context
          filters:
            branches:
              ignore:
                - main
                - dependency-updates
      - release-build:
          context: automation-context
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
