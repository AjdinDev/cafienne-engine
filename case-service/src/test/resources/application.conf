projectionsDB {
  profile = "slick.jdbc.H2Profile$"
  db {
    connectionPool = disabled
    keepAliveConnection = true
    driver = "org.h2.Driver"
    url = "jdbc:h2:mem:tsql1;DATABASE_TO_UPPER=false;DB_CLOSE_DELAY=-1"
  }
}

akka {
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters = 30
  log-dead-letters-during-shutdown = on

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serialize-messages = on

    serializers {
      command_serializer = "org.cafienne.akka.actor.serialization.CommandSerializer"
      response_serializer = "org.cafienne.akka.actor.serialization.ResponseSerializer"
      event_serializer = "org.cafienne.akka.actor.serialization.EventSerializer"
      // offset_serializer is used to serialize offset snapshots
      offset_serializer = "org.cafienne.infrastructure.eventstore.OffsetSerializer"
    }
    serialization-bindings {
      "org.cafienne.akka.actor.event.ModelEvent" = event_serializer
      "org.cafienne.akka.actor.command.ModelCommand" = command_serializer
      "org.cafienne.akka.actor.command.response.ModelResponse" = response_serializer
      // Current offsets are WrappedOffset objects
      "org.cafienne.infrastructure.eventstore.WrappedOffset" = offset_serializer
      // enable below to check if all events have been serialized without java.io.Serializable
      //"java.io.Serializable" = none
    }

    cluster {
      seed-nodes = ["akka.tcp://org-cafienne-infrastructure-akka-http-authentication-AuthenticationDirectiveSpec@127.0.0.1:64778"]
      #roles = ["case-domain"]
      auto-down-unreachable-after = 40s
    }
  } // actor

  persistence {
    journal {
      #plugin = "akka.persistence.journal.inmem"
      
      # Using Dennis Vriend in-mem journal
      plugin = "inmemory-journal"
    }
  }// persistence
}// akka

inmemory-journal {
  event-adapters {
    tagging = "org.cafienne.akka.actor.tagging.CaseTaggingEventAdapter"
  }

  event-adapter-bindings {
    "org.cafienne.akka.actor.event.ModelEvent" = tagging
  }
}
